/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package cryptoutils;

import java.io.FileReader;
import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.util.Base64;
import java.util.Properties;

public class CryptoUtils {
    public String getGreeting() {return "Hello";}
    public static void main(String[] args) throws NoSuchAlgorithmException {
        byte[] salt12 = getSalt();
        byte[] salt3 = getSalt();
        String digest1 = getDigest("teknos", salt12);
        String digest2 = getDigest("teknos", salt12);
        String digest3 = getDigest("teknos", salt3);
        System.out.println("digest1:" + digest1);
        System.out.println("digest2:" + digest2);
        System.out.println("digest3:" + digest3);
    }
    public static String getDigest(String data, byte[] salt) throws NoSuchAlgorithmException {
        byte[] dataBytes = data.getBytes();
        MessageDigest messageDigest = MessageDigest.getInstance("SHA-256");
        messageDigest.update(salt);
        byte[] digest = messageDigest.digest(dataBytes);
        Base64.Encoder base64Encoder = Base64.getEncoder();
        return  base64Encoder.encodeToString(digest);
    }

    public static byte[] getSalt() {
        SecureRandom sercureRandom = new SecureRandom();
        var salt = new byte[16];
        sercureRandom.nextBytes(salt);
        return salt;
    }

    public DigestResult Hash(byte[] message){
        DigestResult digRes = new DigestResult();
        Properties prop = new Properties();
        try {
            prop.load(new FileReader("cryptoUtils.properties"));

            String salt = (String) prop.get("hash.salt");
            String algorithm=(String)prop.get("hash.algorithm");
            digRes.setAlgorithm(algorithm);

            byte[] saltBytes=this.getSalt();
            digRes.setSalt(saltBytes);
            MessageDigest messageDigest = MessageDigest.getInstance(algorithm);

            if (salt.equals("true")){
                messageDigest.update(saltBytes);
            }
            var hash = messageDigest.digest(message);
            digRes.setHash(hash);

        } catch (IOException e) {
            throw new RuntimeException(e);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(e);
        }
        return digRes;
    }
}
